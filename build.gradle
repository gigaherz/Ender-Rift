buildscript {
    repositories {
        mavenLocal()
        maven { url = 'http://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.4'
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
//apply plugin: 'maven-publish'

repositories {
    mavenLocal()
    maven {
        url 'https://dogforce-games.com/maven'
    }
    maven {
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        url 'https://maven.mcmoddev.com/'
    }
    /*maven {
        url "https://tehnut.info/maven"
    }*/
    maven {
        url "F:/Modding/tehnut-maven-backup/maven"
    }
    maven {
        url "https://github.com/TehNut/temporary-maven-thing/tree/master/maven"
    }
    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
/*
    maven {
        name = "CoFH Maven"
        url = "http://maven.covers1624.net"
    }
 */
}

version = "2.2.7"
group= "gigaherz.enderRift"
archivesBaseName = "EnderRift-UNKNOWN"

project.afterEvaluate {
    archivesBaseName = "EnderRift-${project.MC_VERSION}"
}

//sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

sourceSets {
    main.resources.srcDirs += 'src/main/generated_resources'
}

minecraft {
    mappings channel: 'snapshot', version: '20200521-1.15.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'

            mods {
                thismod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'

            mods {
                thismod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'enderrift', '--all', '--output', file('src/main/generated_resources/'), '--existing', file('src/main/resources/')

            mods {
                thismod {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    shade
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.15.2-31.2.41'

    compile "gigaherz.graph:GraphLib2:2.0.0"
    shade "gigaherz.graph:GraphLib2:2.0.0"

    //deobfCompile "gigaherz.guidebook:Guidebook-1.12.2:2.9.0"

    compileOnly fg.deobf("mezz.jei:jei-1.15.2:6.0.0.3:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.15.2:6.0.0.3")

    compileOnly fg.deobf("mcp.mobius.waila:Hwyla:1.10.8-B72_1.15.2")

    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.15:1.15-2.0.6-6")

    //compile fileTree(dir: 'libs', include: '*.jar')
}

jar {
    classifier = 'slim'
}

shadowJar {
    classifier = ''
    configurations = [project.configurations.shade]
    relocate 'gigaherz.graph2', "${project.group}.shadow.graphlib2"
}

reobf {
    shadowJar { }
}

tasks.build.dependsOn reobfShadowJar

jar {
    manifest {
        attributes([
                "Specification-Title": "enderrift",
                "Specification-Vendor": "gigaherz",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"gigaherz",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

artifacts {
    archives shadowJar
}

System.out.println("Running with java ${System.getProperty("java.version")} (${System.getProperty("os.arch")})")
